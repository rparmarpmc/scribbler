{% comment %}
  Renders the printess printess integration code for non single item implementations
  Version 2.6

  Accepts:
  - shopToken: {String} Your printess shop token.
  - startupLogoUrl: {String} Url for the startup logo of the editor that should be displayed on load (requires premium account),
  - showStartupAnimation: {Boolean} The stars startup animation should be displayed.
  - hidePricesInEditor: {Boolean} The editor should display product prices.
  - editorVersion: {String} The editor version that should be loaded "" for release; "/v/nightly" for dev.
  - legalText: {String} The legal text that should be displayed inside the editor together with the price.
  - theme: {String} The theme the editor should be loaded with.
  - showProductName: {Boolean} If set to false, the editor will not display the product name.
  - showAlertOnTabClose: {Boolean} If set to true, a warning is shown in case the editor is open and someone closes the current tab.
  - startupBackgroundColor: {String} The background color for the startup screen
  - showSplitterGridSizeButton: {Boolean} Set to false to hide the Gridsize Button
  - additionalAttachParams: {Object} Additional startup params
  - duplicateAndPersonalizeText: {String} Will show a duplicate & personalize link that enables the customer to open the current basket item, modify it and add it as a second
  - graphQlToken: {String}: The App Access Token for the Graphql Api
  - forceCartItemCleanup: {Boolean}: Forces the cleanup of cart items that have noot been deleted correctly due to other scripts
  Usage:
  {% render 'printess-cart-edit-button',
    shopToken: "",
    startupLogoUrl: "",
    showStartupAnimation: true,
    hidePricesInEditor: false,
    editorVersion: "/v/nightly",
    legalText: "incl. tax, excl. shipping",
    theme: "theme01",
    showProductName: true,
    showAlertOnTabClose: true,
    startupBackgroundColor: "#000000",
    showSplitterGridSizeButton: false,
    additionalAttachParams: {},
    duplicateAndPersonalizeText: "",
    graphQlToken: "",
    forceCartItemCleanup: false
  %}
{% endcomment %}

<script id="printess_single_cart_script">
  if(!window["getPrintessEditor"]) {
      window["getPrintessEditor"] = function() {
          if(!getPrintessEditor.editor) {
              getPrintessEditor.editor = new PrintessShopifyCart({ displayProductName: !({{showProductName | json}} === false),
                                                                                                              shopToken: "{{ shopToken }}",
                                                                                                              "startupLogoUrl": "{{ startupLogoUrl }}",
                                                                                                              "showStartupAnimation": true,
                                                                                                              "hidePricesInEditor": false,
                                                                                                              shopMoneyFormat: "{{ shop.money_format }}",
                                                                                                              "editorVersion": {{ editorVersion | json }},
                                                                                                              "showAlertOnTabClose": {{showAlertOnTabClose | json}} === true,
                                                                                                              "startupBackgroundColor": "{{startupBackgroundColor}}" || "#000000",
                                                                                                              "graphQlToken": {{graphQlToken | json}} || ""
                                                                                                            });
          }

          return getPrintessEditor.editor;
      }
  }

  if(!window["printessShowEditorForItem"]) {
      window["printessShowEditorForItem"] = function(basketItem) {
          const basketItemProperties = basketItem.properties ? JSON.parse(JSON.stringify(basketItem.properties)) : {};

          if(basketItemProperties) {
              basketItem.properties = {};
              // basketItemProperties.forEach((prop) => {
              //     if(prop.length > 1) {
              //         basketItem.properties[prop[0]] = prop[1];
              //     } else {
              //         basketItem.properties[prop[0]] = "";
              //     }
              // });
          }

          if(basketItem.options_with_values) {
              basketItem.options_with_values.forEach((x) => {
                  basketItem.properties[x.name] = x.value;
              });
          }

          const editor = window["getPrintessEditor"]();

          if(!editor) {
              return;
          }

          let attachParams = null;

          try {attachParams = JSON.parse({{ additionalAttachParams | json }});}catch(e){}

          const settings = {
              basketItemId: basketItem.key,
              basketItemOptions: basketItem.properties,
              productId: basketItem.product_id,
              quantity: basketItem.quantity,
              legalText: {% if legalText != blank %}{{ legalText | json }}{% else %}""{% endif %},
              theme: {% if theme != blank %}"{{ theme }}"{% else %}""{%endif%},
              additionalAttachParams: attachParams,
              displayProductName: !({{showProductName | json}} === false),
          };

          {% if showSplitterGridSizeButton != null %}settings["showSplitterGridSizeButton"] = {{showSplitterGridSizeButton | json}};{% endif %}

          editor.show(settings);
      };
  }
</script>
