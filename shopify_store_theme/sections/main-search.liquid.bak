<div class="template-search" style="padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px; ">
  <div class="search-header">
    <div class="search-page-title">
      {%- if search.performed -%}
        {{ 'templates.search.title' | t }}
      {%- else -%}
        {{ 'general.search.search' | t }}
      {%- endif -%}
    </div>
    <div class="search-term">
      {{ search.terms | escape }}
      <p style="text-align: center;font-size: 20px; font-weight: bold; margin: 0px auto 15px auto;">({{ search.results_count }})</p>
    </div>
  

    <div class="filter-sort-wrapper">
      <div class="filters">
        <details class="filter-section" id="Details-{{ section.id }}" closed>
          <summary class="filter-add-button">
            <div class="filter-overlay"></div>
            <span>Add Filter</span>
            {% render 'icon-plus' %}
          </summary>
            <div id="Facet-{{ section.id }}" class="filter-add-wrapper">        
              <div class="filter-header">
                <span class="facets__selected no-js-hidden">0 selected</span>
                <button id="clear_filters" href="#" onclick="resetFilters()" class="clear_filters">{{ 'products.facets.reset' | t }}</button>
              </div>
              <div id="filter-options" class="filter-options-wrapper"></div>
            </div>
        </details>
      </div>
      <div class="sorting">
        <details class="sorting-section" id="Details-{{ section.id }}">
          <summary class="sorting-add-button" aria-label="({{ 'products.facets.filters_selected.one' }})">
            <div class="sorting-overlay"></div>
            <span>{{ 'products.facets.sort_by_label' | t }}</span>
            <div  class="sorting-results">
              <div class="sorting-selected">
                Bestsellers
              </div>
              {% render 'icon-caret' %}
            </div>
          </summary>
          <div class="sorting-add-wrapper">
            <div class="sorting-option">
              <input type="radio" id="manual-best-selling" name="sort" value="manual-best-selling" onclick="changeSortOrder('manual-best-selling','Featured')">
              <label for="manual-best-selling">Featured</label>
            </div>
            <div class="sorting-option">
              <input type="radio" id="best-selling" name="sort" value="best-selling" checked onclick="changeSortOrder('best-selling','Bestsellers')">
              <label for="best-selling">Bestsellers</label>
            </div>
            <div class="sorting-option">
              <input type="radio" id="created-descending" name="sort" value="created-descending" onclick="changeSortOrder('created-descending','Date, old to new')">
              <label for="created-descending">New In</label>
            </div>
            <div class="sorting-option">
              <input type="radio" id="created-ascending" name="sort" value="created-ascending" onclick="changeSortOrder('created-ascending','Date, new to old')">
              <label for="created-ascending">Classics</label>
            </div>
          </div>
        </details>
      </div>
    </div>
    <div class="active-filters">
    </div>
  </div>
   <div class="search-collections-results">
    <div class="search-results-title">Categories with related products</div>
    <div class="search-collections"></div>
  </div>
  <div class="search-vendors-results">
    <div class="search-results-title">Vendors with related products</div>
    <div class="search-vendors"></div>
  </div> 



  <div class="no-product-loaded"></div>
  <div class="search-products-results">
    <div class="search-results-products-title">Products</div>
    <div class="product-grid-container">
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
      <div class="collection-slider-item">  
        <div class="collection-grid-item-product">
          <div class="product-grid-add-loader loading"></div>
        </div>
      </div>
    </div>
  </div>
  <div class="product-loader hiddenLoader">
    <svg aria-hidden="true" focusable="false" width="50" role="presentation" class="spinner" viewBox="0 0 66 66"
      xmlns="http://www.w3.org/2000/svg">
      <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
    </svg>
  </div>
</div>

<script type="text/javascript" defer>
  const collectionContainer = document.querySelector('.search-collections');
  const vendorContainer = document.querySelector('.search-vendors');
  const productContainer = document.querySelector('.product-grid-container');
  const optionsContainer = document.getElementById("filter-options")
  const loader = document.querySelector('.product-loader');
  const empty = document.querySelector('.no-product-loaded');

  let page = 0
  let initial_limit = 54
  let numberOfProducts = 54
  let category_limit = 30
  let vendor_limit = 30
  let search_term = new URLSearchParams(window.location.search).get('q').replace(' ', '-').toLowerCase()
  let filter_tags = []
  let sort_order = "best-selling"

  let products = []
  let collections = []
  let vendors = []
  let tags = []

  const mediaQuery2 = window.matchMedia('(max-width: 749px)')
  const mediaQuery3 = window.matchMedia('(min-width: 750px) and (max-width: 989px)')
  const mediaQuery4 = window.matchMedia('(min-width: 990px) and (max-width: 1199px)')
  const mediaQuery5 = window.matchMedia('(min-width: 1200px) and (max-width: 1499px)')
  const mediaQuery6 = window.matchMedia('(min-width: 1500px) and (max-width: 1921px)')
  const mediaQuery7 = window.matchMedia('(min-width: 1922px) and (max-width: 2199px)')
  const mediaQuery8 = window.matchMedia('(min-width: 2200px) and (max-width: 2499px)')
  const mediaQuery9 = window.matchMedia('(min-width: 2500px) and (max-width: 2999px)')
  const mediaQuery10 = window.matchMedia('(min-width: 3000px) and (max-width: 3199px)')
  const mediaQuery11 = window.matchMedia('(min-width: 3200px) and (max-width: 3499px)')
  const mediaQuery12 = window.matchMedia('(min-width: 3500px)')
  
  const setInitialParams = () => {
    if(mediaQuery2.matches) {
      page = 0
      initial_limit = 30
      numberOfProducts = 30
      category_limit = 8
    }

    if(mediaQuery3.matches) {
      page = 0
      initial_limit = 33
      numberOfProducts = 33
      category_limit = 8
    }

    if(mediaQuery4.matches) {
      page = 0
      initial_limit = 40
      numberOfProducts = 40
      category_limit = 14
    }

    if(mediaQuery5.matches) {
      page = 0
      initial_limit = 50
      numberOfProducts = 50
      category_limit = 14
    }
  
    if(mediaQuery6.matches) {
      page = 0
      initial_limit = 54
      numberOfProducts = 54
      category_limit = 14
    }

    if(mediaQuery7.matches) {
      page = 0
      initial_limit = 56
      numberOfProducts = 56
      category_limit = 30
    }
   
    if(mediaQuery8.matches) {
      page = 0
      initial_limit = 64
      numberOfProducts = 64
      category_limit = 30
    }
    
    if(mediaQuery9.matches) {
      page = 0
      initial_limit = 72
      numberOfProducts = 72
      category_limit = 30
    }

    if(mediaQuery10.matches) {
      page = 0
      initial_limit = 90
      numberOfProducts = 90
      category_limit = 30
    }

    if(mediaQuery11.matches) {
      page = 0
      initial_limit = 99
      numberOfProducts = 99
      category_limit = 30
    }

    if(mediaQuery12.matches) {
      page = 0
      initial_limit = 120
      numberOfProducts = 120
      category_limit = 30
    }
  }

  // Initial check
  setInitialParams()

  const searchLoad = (mode) => {
    loader.classList.remove('hiddenLoader')
    const data = {
      search_term: search_term,
      rude: true,
      product_limit: numberOfProducts ,
      product_initial_limit: initial_limit,
      product_page: page,
      category_limit: category_limit,
      vendor_limit: vendor_limit,
      filter_tags: filter_tags,
      sort_order: sort_order
    }

    fetch(`/apps/scribblerApi/v1/shoppify/public/products/search`, { priority: 'high', method: 'POST', headers: { 'Content-Type': 'application/json', Accept: `application/json` }, body: JSON.stringify(data) })
      .then(response => response.json())
      .then(response => {
       
        if(mode === 'initial') {
          if(response.products.length > 0){
            products = response.products
          }
          if(response.collections.length > 0){
            collections = response.collections
          }
          if(response.vendors.length > 0){
            vendors = response.vendors
          }
          if(response.tags.length > 0){
            tags = response.tags.sort((a, b) => a.name.localeCompare(b.name));
          }
          productContainer.innerHTML = ''
          window.scrollTo({ top: 0, behavior: 'instant' });

          displaySearch()
        }

        if(mode === 'more') {
          if(response.products.length > 0){
            products = [
              ...products,
              ...response.products
            ]
            displaySearch()
          }
        }
      })
      .catch (e => {
        console.error(e);
      })
  }

  searchLoad('initial');


  const displaySearch = async () => {         
    if (products.length > 0) {
      var params = {
        'isLoggedIn': {% if customer %}true{% else %}false{% endif %},
        'default_vendor_logo': '{{ 'scribbler-vendor-logo.png' | asset_url }}',
        'type': {% if section.settings.product_layout == 'gift' %}'gift'{% else %}'card'{% endif %}, 
      }

      while (!loadStatus.create_slider_loaded) {
        await delay(50);
      }

      productContainer.innerHTML = createCardSlide(products, params)

      optionsContainer.innerHTML = ''
      tags.map(tag => {
        optionsContainer.innerHTML += `
          <div class="filter-option">
            <input type="checkbox" name="search-tag" value="${tag.name}" id="Filter-${tag.id}" onchange="changeTagFilter()" ${filter_tags.includes(tag.name) ? 'checked' : ''}>
            <label for="Filter-${tag.id}" class="checkbox">
              ${tag.name} (${tag.counter})
            </label>       
          </div>
        `
      })
    } else {   
      productContainer.innerHTML = ''
      empty.innerHTML = `
        <p>Oops! No matches found. Try refining your search or discover something new in our collections below.</p>
        <div class="Empty-Search-Buttons">
          <a href="/collections/cards-all" class="search-button">View All Cards</a>
          <div class="divider"></div>
          <a href="/collections/gifts-all" class="search-button">View All Gifts</a>
        </div>
      `   
    }
    loader.classList.add('hiddenLoader')
  }

  const changeTagFilter = () => {
    setInitialParams()

    const tagCheckboxes = document.getElementsByName('search-tag')
    let checked = 0
   
    tagCheckboxes && tagCheckboxes.forEach((checkbox) => {
      checkbox.checked && checked++
    });

    document.querySelector(".facets__selected").innerHTML = checked + ' selected'

    filter_tags = []
    tagCheckboxes && tagCheckboxes.forEach((checkbox) => {
      checkbox.checked && filter_tags.push(checkbox.value)
    });

    const selectedTagsContainer = document.getElementsByClassName("active-filters")
    selectedTagsContainer[0].innerHTML = ''

    filter_tags.map((tag, index) => {
      selectedTagsContainer[0].innerHTML += `
        <button class="active-filter-button" onclick="removeFilter(${index})">
          ${tag}
          <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-close-small" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8.48627 9.32917L2.82849 3.67098" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
            <path d="M2.88539 9.38504L8.42932 3.61524" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
          </svg>
        </button>
      `
    })

    searchLoad('initial');
  }

  const removeFilter = tagIndex => {
    const removeTag = filter_tags[tagIndex]
    filter_tags.splice(tagIndex, 1)
    const tagCheckboxes = document.getElementsByName('search-tag')

    tagCheckboxes && tagCheckboxes.forEach((checkbox,index) => {
      if(checkbox.value === removeTag) checkbox.checked = false
    });
    
    changeTagFilter();
  }
  
  const resetFilters = () => {
    filter_tags = []
    document.querySelector(".facets__selected").innerHTML = '0 selected'
    const tagCheckboxes = document.getElementsByName('search-tag')
    tagCheckboxes && tagCheckboxes.forEach( checkbox => checkbox.checked = false );
    setInitialParams()
    searchLoad('initial');
  }

  const changeSortOrder = (sortOrder,sortName) => {
    setInitialParams()
    sort_order = sortOrder
    document.querySelector(".sorting-selected").innerHTML = sortName
    searchLoad('initial');
  }

  let throttleTimer;
  const throttle = (callback, time) => {
    if (throttleTimer) return;
    throttleTimer = true;
    setTimeout(() => {
      callback();
      throttleTimer = false;
    }, time);
  }

  const onscrollend = (event) => {
    let footerHeight = document.querySelector(".footer").clientHeight;

    if (window.scrollY + window.innerHeight + footerHeight >= document.documentElement.scrollHeight) {
      page++
      if (window.innerWidth < 750) {
        numberOfProducts = 14
      } else if (window.innerWidth < 990) {
        numberOfProducts = 15
      } else if (window.innerWidth < 1200) {
        numberOfProducts = 20
      } else if (window.innerWidth < 1500) {
        numberOfProducts = 25
      } else if (window.innerWidth < 1922) {
        numberOfProducts = 24
      } else if (window.innerWidth < 2200) {
        numberOfProducts = 21
      } else if (window.innerWidth < 2500) {
        numberOfProducts = 32
      } else if (window.innerWidth < 3000) {
        numberOfProducts = 36
      } else if (window.innerWidth < 3200) {
        numberOfProducts = 40
      } else if (window.innerWidth < 3500) {
        numberOfProducts = 44
      } else {
        numberOfProducts = 48
      }

      // Find the last element with the class 'collection-slider-item'
      const collectionItems = document.querySelectorAll('.collection-slider-item');
      const lastItem = collectionItems[collectionItems.length - 1];

      // Get the position of the last item
      if (lastItem) {
        const lastItemPosition = lastItem.getBoundingClientRect().top + window.pageYOffset;

        // Scroll the page to the last item's position
        window.scrollTo({
          top: lastItemPosition,
          behavior: 'smooth' // Smooth scroll
        });

        // Set focus to the last item
        lastItem.focus();
      }

      return searchLoad('more');
    }
  };

  window.addEventListener("scroll", () => {
    throttle(onscrollend, 1000);
  }, { passive: true });

  const handleMQChange = (e, newInitialLimit, newProductLimit, category) => {
    if (e.matches) {
      page = 0
      initial_limit = newInitialLimit
      numberOfProducts = newProductLimit
      category_limit = category
      searchLoad('initial');
    }
  }

  mediaQuery2.addEventListener('change', e => { handleMQChange(e, 30, 30, 8) })
  mediaQuery3.addEventListener('change', e => { handleMQChange(e, 33, 33, 8) })
  mediaQuery4.addEventListener('change', e => { handleMQChange(e, 40, 40, 14) })
  mediaQuery5.addEventListener('change', e => { handleMQChange(e, 50, 50, 14) })
  mediaQuery6.addEventListener('change', e => { handleMQChange(e, 54, 54, 14) })
  mediaQuery7.addEventListener('change', e => { handleMQChange(e, 56, 56, 30) })
  mediaQuery8.addEventListener('change', e => { handleMQChange(e, 64, 64, 30) })
  mediaQuery9.addEventListener('change', e => { handleMQChange(e, 72, 72, 30) })
  mediaQuery10.addEventListener('change', e => { handleMQChange(e, 90, 90, 30) })
  mediaQuery11.addEventListener('change', e => { handleMQChange(e, 99, 99, 30) })
  mediaQuery12.addEventListener('change', e => { handleMQChange(e, 120, 120, 30) })

  new Promise(async function(resolve, reject){
    if(!loadStatus.create_slider_started){
        loadStatus.create_slider_started = true;
        loadJS("create_slider", "{{ 'create-slider.js' | asset_url }}", "create_slider_loaded", true);
    }

    while (!loadStatus.react_loaded) {
      await delay(50);
    }

    window.eventBus.subscribe('FILTER_CHANGED', () => {
        productContainer.innerHTML = ''
        window.scrollTo({ top: 0, behavior: 'instant' });
        setInitialParams()
        searchLoad('initial');
    })
    resolve(true);
  });
</script>

{% schema %}
{
    "name": "t:sections.main-search.name",
    "tag": "section",
    "class": "section",
    "settings": [
        {
            "type": "header",
            "content": "t:sections.all.padding.section_padding_heading"
        },
        {
            "type": "range",
            "id": "padding_top",
            "min": 0,
            "max": 100,
            "step": 4,
            "unit": "px",
            "label": "t:sections.all.padding.padding_top",
            "default": 36
        },
        {
            "type": "range",
            "id": "padding_bottom",
            "min": 0,
            "max": 100,
            "step": 4,
            "unit": "px",
            "label": "t:sections.all.padding.padding_bottom",
            "default": 36
        }
    ]
}
{% endschema %}
