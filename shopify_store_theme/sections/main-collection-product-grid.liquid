{%- liquid
  assign settings.animations_reveal_on_scroll = true
%}
{{ 'ajaxinate.min.js' | asset_url | script_tag }}
<div class="section-{{ section.id }}-padding gradient">
  <h1 class="collection-page-title">
    {{ collection.title | escape }} 
  </h1>
  <p style="text-align: center;font-size: 20px; font-weight: bold; margin: 0px auto 15px auto;">({{ collection.products_count }})</p>
  {%- paginate collection.products by 20-%}
    <div>    
        <aside
          aria-labelledby="verticalTitle"
          class="facets-wrapper  page-width"
          id="main-collection-filters"
          data-id="{{ section.id }}"
        >
          {% render 'facets',
            results: collection,
            enable_filtering: true,
            enable_sorting: true,
            filter_type: 'horizontal',
            paginate: paginate
          %}
        </aside>
      
      <div
        class="product-grid-container scroll-trigger animate--slide-in"
        id="ProductGridContainer"
          data-cascade

      >

        {%- if collection.products.size == 0 -%}
          <div class="collection collection--empty page-width" id="product-grid" data-id="{{ section.id }}">
            <div class="loading-overlay gradient"></div>
            <div class="title-wrapper center">
              <h2 class="title title--primary">
                {{ 'sections.collection_template.empty' | t -}}
                <br>
                {{
                  'sections.collection_template.use_fewer_filters_html'
                  | t: link: collection.url, class: 'underlined-link link'
                }}
              </h2>
            </div>
          </div>
        {%- else -%}
          <div
            class="collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          >
            <div class="loading-overlay gradient"></div>
            <ul
              id="product-grid"
              data-id="{{ section.id }}"
              class=" product-grid-container  
                grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                grid--{{ section.settings.columns_desktop }}-col-desktop
                {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}
              "
            >
              {% assign skip_card_product_styles = false %}
              {%- for product in collection.products -%}
                {% assign lazy_load = false %}
                {%- if forloop.index > 2 -%}
                  {%- assign lazy_load = true -%}
                {%- endif -%}
                <li
                  class="collection-slider-item grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                  {% if settings.animations_reveal_on_scroll %}
                    data-cascade
                    style="--animation-order: {{ forloop.index }};"
                  {% endif %}
                >
                  {% if product.type == "Cards" %}
                    <style>
                      [value="price-ascending"], [value="price-ascending"] + label,
                      [value="price-descending"], [value="price-descending"] + label,
                      [value="title-ascending"], [value="title-ascending"] + label,
                      [value="title-descending"], [value="title-descending"] + label {
                        display: none;
                      }
                    </style>
                  {% endif %}
                  {% if product.type == "Gifts" %}
                    <style>
                      [value="title-ascending"], [value="title-ascending"] + label,
                      [value="title-descending"], [value="title-descending"] + label{
                        display: none;
                      }
                    </style>
                  {% endif %}
                  {% render 'card-product',
                    card_product: product,
                    media_aspect_ratio: section.settings.image_ratio,
                    image_shape: section.settings.image_shape,
                    show_secondary_image: section.settings.show_secondary_image,
                    show_vendor: true,
                    show_rating: section.settings.show_rating,
                    lazy_load: lazy_load,
                    skip_styles: skip_card_product_styles,
                    quick_add: section.settings.quick_add,
                    section_id: section.id
                  %}
                </li>
                {%- assign skip_card_product_styles = true -%}
              {%- endfor -%}
            </ul>
            
             {%- if paginate.pages > 1 -%}
                <div id="AjaxinatePagination">
                  {% if paginate.next %}
                    <a href="{{ paginate.next.url }}">Loading More</a>
                  {% endif %}
                </div>
            {%- endif -%} 
          </div>
        {%- endif -%}
      </div>
    </div>
  {%- endpaginate -%}
  {% if section.settings.image_shape == 'arch' %}
    {{ 'mask-arch.svg' | inline_asset_content }}
  {%- endif -%}
  <div class="collection-page-description rte">
    {%- if collection.metafields.custom.show_description -%}
      {{ collection.description }}
    {%- endif -%}
  </div>
</div>
<script type='module' defer>
  let countryCodesMap = new Map();

  // Function to load a script dynamically and return a Promise
function loadScript(url) {
  return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = url;
      script.async = true;
      script.onload = () => resolve(url);
      script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
      document.head.appendChild(script);
  });
}

// Load create-slider.js and then load facets.js
loadScript("{{ 'create-slider.js' | asset_url }}")
  .then(() => {
      return loadScript("{{ 'facets.js' | asset_url }}");
  })
  .catch(error => {
      console.error(error);
  });

function FetchFavourites(){
  fetch(`/apps/scribblerApi/v1/shoppify/private/favourite/product_details`, { 
    method: 'GET', 
    headers: { 'Content-Type': 'application/json' } 
  })
  .then(response => response.json())
  .then(async function(response) {
    if(response.length > 0){
      response.products.forEach(product => {
        const className = `fav_logo${product['id']}`;
        const elements = document.getElementsByClassName(className);
        
        for (let i = 0; i < elements.length; i++) {
          elements[i].innerHTML = `<button type="button" name="Add to Favourites" favourite="true" onclick="removeFavourite(this,${product['id']})" class="add-to-favourites-button">
                                    <div class="product-add-loader"></div>
                                    <svg width="35" height="33" viewBox="0 0 35 33" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path opacity="0.9" d="M17.1252 32.2173C26.4744 32.2173 34.0534 25.0052 34.0534 16.1087C34.0534 7.21209 26.4744 0 17.1252 0C7.77604 0 0.197021 7.21209 0.197021 16.1087C0.197021 25.0052 7.77604 32.2173 17.1252 32.2173Z" fill="#E6E6E6"/>
                                        <path d="M24.4161 11.0845C23.4943 10.0478 22.3211 9.56934 21.1478 9.56934C19.9746 9.56934 18.8013 10.0478 17.8795 11.0845L17.1253 11.9617L16.371 11.0845C15.4492 10.0478 14.276 9.56934 13.1027 9.56934C11.9295 9.56934 10.7562 10.0478 9.83441 11.0845C7.99074 13.1579 7.99074 16.5072 9.83441 18.5806L10.5886 19.4578L16.2872 25.997C16.7063 26.4754 17.4605 26.4754 17.8795 25.997L23.5781 19.4578L24.3323 18.5806C26.176 16.5072 26.176 13.1579 24.3323 11.0845H24.4161Z" stroke="#cbd81d" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                </button>`;
        }
      });
      // Observe the elements for changes
      for (let i = 0; i < elements.length; i++) {
        observer.observe(elements[i], { childList: true });
      }
    }
  })
  .catch(error => console.error('Error:', error));
}




FetchFavourites();

// Function to check and call FetchFavourites if query string changes
function checkQueryStringChange() {
  let currentQueryString = window.location.search;
  let previousQueryString = currentQueryString;

  setInterval(function() {
      currentQueryString = window.location.search;
      if (currentQueryString !== previousQueryString) {
          previousQueryString = currentQueryString;
          FetchFavourites();
      }
  }, 500); // Check every second (adjust as needed)
}

// Call the function on page load to handle initial URL parameters
window.addEventListener('load', function() {
  FetchFavourites();
  checkQueryStringChange();
});


</script>

<script>
  const onscrollend = (event) => { 
    let footerHeight = document.querySelector(".footer").clientHeight;
    if (window.scrollY + window.innerHeight + footerHeight >= document.documentElement.scrollHeight) {
        // Find the last element with the class 'collection-slider-item'
        const collectionItems = document.querySelectorAll('.collection-slider-item');
        const lastItem = collectionItems[collectionItems.length - 1];

        // Get the position of the last item
        if (lastItem) {
          const lastItemPosition = lastItem.getBoundingClientRect().top + window.pageYOffset;

          // Scroll the page to the last item's position
          window.scrollTo({
            top: lastItemPosition - 200,
            behavior: 'smooth' // Smooth scroll
          });

          // Set focus to the last item
          lastItem.focus();
        }
    }
  }
  let throttleTimer;
  const throttle = (callback, time) => {
    if (throttleTimer) return;
    throttleTimer = true;
    setTimeout(() => {
      callback();
      throttleTimer = false;
    }, time);
  }

  window.addEventListener("scroll", () => {
    throttle(onscrollend, 1000);
  }, { passive: true });
  
</script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
     var loadericon = `<svg width="35" height="33" viewBox="0 0 35 33" fill="#6e6d6d" xmlns="http://www.w3.org/2000/svg">
                    <path opacity="0.9" d="M17.1252 32.2173C26.4744 32.2173 34.0534 25.0052 34.0534 16.1087C34.0534 7.21209 26.4744 0 17.1252 0C7.77604 0 0.197021 7.21209 0.197021 16.1087C0.197021 25.0052 7.77604 32.2173 17.1252 32.2173Z" fill="none"/>
                    <path d="M24.4161 11.0845C23.4943 10.0478 22.3211 9.56934 21.1478 9.56934C19.9746 9.56934 18.8013 10.0478 17.8795 11.0845L17.1253 11.9617L16.371 11.0845C15.4492 10.0478 14.276 9.56934 13.1027 9.56934C11.9295 9.56934 10.7562 10.0478 9.83441 11.0845C7.99074 13.1579 7.99074 16.5072 9.83441 18.5806L10.5886 19.4578L16.2872 25.997C16.7063 26.4754 17.4605 26.4754 17.8795 25.997L23.5781 19.4578L24.3323 18.5806C26.176 16.5072 26.176 13.1579 24.3323 11.0845H24.4161Z" stroke="#333333" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>`;
    var endlessScroll = new Ajaxinate({
      method: 'scroll', // Change to 'click' if you want a button instead
      container: '#product-grid',
      pagination: '#AjaxinatePagination',
      loadingText: loadericon
    });
  });
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const favs = JSON.parse(localStorage.getItem('favorites') || '[]');

    document.querySelectorAll('.add-to-favourites-button').forEach(button => {
        const isLoggedIn = button.getAttribute('onclick')?.includes('addFavourite');
        const idMatch = button.getAttribute('onclick')?.match(/\d+/);
        const productId = idMatch ? parseInt(idMatch[0]) : null;

        if (favs.includes(productId)) {
            button.setAttribute('favourite', 'true');
            button.setAttribute('onclick', `removeFavourite(this, ${productId})`);
            const iconPath = button.querySelectorAll('svg path')[1];
            if (iconPath) {
                iconPath.style.stroke = '#cbd81d';
                iconPath.style.fill = 'none';
            }
        }
    });
});

</script>